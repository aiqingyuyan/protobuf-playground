// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: article_collection.proto

#ifndef PROTOBUF_article_5fcollection_2eproto__INCLUDED
#define PROTOBUF_article_5fcollection_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace tutorial {
class Article;
class ArticleDefaultTypeInternal;
extern ArticleDefaultTypeInternal _Article_default_instance_;
class ArticleCollection;
class ArticleCollectionDefaultTypeInternal;
extern ArticleCollectionDefaultTypeInternal _ArticleCollection_default_instance_;
class Article_Author;
class Article_AuthorDefaultTypeInternal;
extern Article_AuthorDefaultTypeInternal _Article_Author_default_instance_;
}  // namespace tutorial

namespace tutorial {

namespace protobuf_article_5fcollection_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_article_5fcollection_2eproto

enum Article_Topic {
  Article_Topic_SCIENCE = 0,
  Article_Topic_TECHNOLOGY = 1,
  Article_Topic_NATURE = 2,
  Article_Topic_ENTERTAINMENT = 3,
  Article_Topic_POLITICS = 4,
  Article_Topic_Article_Topic_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Article_Topic_Article_Topic_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Article_Topic_IsValid(int value);
const Article_Topic Article_Topic_Topic_MIN = Article_Topic_SCIENCE;
const Article_Topic Article_Topic_Topic_MAX = Article_Topic_POLITICS;
const int Article_Topic_Topic_ARRAYSIZE = Article_Topic_Topic_MAX + 1;

const ::google::protobuf::EnumDescriptor* Article_Topic_descriptor();
inline const ::std::string& Article_Topic_Name(Article_Topic value) {
  return ::google::protobuf::internal::NameOfEnum(
    Article_Topic_descriptor(), value);
}
inline bool Article_Topic_Parse(
    const ::std::string& name, Article_Topic* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Article_Topic>(
    Article_Topic_descriptor(), name, value);
}
// ===================================================================

class Article_Author : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.Article.Author) */ {
 public:
  Article_Author();
  virtual ~Article_Author();

  Article_Author(const Article_Author& from);

  inline Article_Author& operator=(const Article_Author& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Article_Author(Article_Author&& from) noexcept
    : Article_Author() {
    *this = ::std::move(from);
  }

  inline Article_Author& operator=(Article_Author&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Article_Author& default_instance();

  static inline const Article_Author* internal_default_instance() {
    return reinterpret_cast<const Article_Author*>(
               &_Article_Author_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Article_Author* other);
  friend void swap(Article_Author& a, Article_Author& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Article_Author* New() const PROTOBUF_FINAL { return New(NULL); }

  Article_Author* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Article_Author& from);
  void MergeFrom(const Article_Author& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Article_Author* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string email = 3;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.Article.Author)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct protobuf_article_5fcollection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Article : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.Article) */ {
 public:
  Article();
  virtual ~Article();

  Article(const Article& from);

  inline Article& operator=(const Article& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Article(Article&& from) noexcept
    : Article() {
    *this = ::std::move(from);
  }

  inline Article& operator=(Article&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Article& default_instance();

  static inline const Article* internal_default_instance() {
    return reinterpret_cast<const Article*>(
               &_Article_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Article* other);
  friend void swap(Article& a, Article& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Article* New() const PROTOBUF_FINAL { return New(NULL); }

  Article* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Article& from);
  void MergeFrom(const Article& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Article* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Article_Author Author;

  typedef Article_Topic Topic;
  static const Topic SCIENCE =
    Article_Topic_SCIENCE;
  static const Topic TECHNOLOGY =
    Article_Topic_TECHNOLOGY;
  static const Topic NATURE =
    Article_Topic_NATURE;
  static const Topic ENTERTAINMENT =
    Article_Topic_ENTERTAINMENT;
  static const Topic POLITICS =
    Article_Topic_POLITICS;
  static inline bool Topic_IsValid(int value) {
    return Article_Topic_IsValid(value);
  }
  static const Topic Topic_MIN =
    Article_Topic_Topic_MIN;
  static const Topic Topic_MAX =
    Article_Topic_Topic_MAX;
  static const int Topic_ARRAYSIZE =
    Article_Topic_Topic_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Topic_descriptor() {
    return Article_Topic_descriptor();
  }
  static inline const ::std::string& Topic_Name(Topic value) {
    return Article_Topic_Name(value);
  }
  static inline bool Topic_Parse(const ::std::string& name,
      Topic* value) {
    return Article_Topic_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .tutorial.Article.Topic topic = 8;
  int topic_size() const;
  void clear_topic();
  static const int kTopicFieldNumber = 8;
  ::tutorial::Article_Topic topic(int index) const;
  void set_topic(int index, ::tutorial::Article_Topic value);
  void add_topic(::tutorial::Article_Topic value);
  const ::google::protobuf::RepeatedField<int>& topic() const;
  ::google::protobuf::RepeatedField<int>* mutable_topic();

  // string title = 3;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string snippet = 4;
  void clear_snippet();
  static const int kSnippetFieldNumber = 4;
  const ::std::string& snippet() const;
  void set_snippet(const ::std::string& value);
  #if LANG_CXX11
  void set_snippet(::std::string&& value);
  #endif
  void set_snippet(const char* value);
  void set_snippet(const char* value, size_t size);
  ::std::string* mutable_snippet();
  ::std::string* release_snippet();
  void set_allocated_snippet(::std::string* snippet);

  // string content = 5;
  void clear_content();
  static const int kContentFieldNumber = 5;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .tutorial.Article.Author author = 7;
  bool has_author() const;
  void clear_author();
  static const int kAuthorFieldNumber = 7;
  const ::tutorial::Article_Author& author() const;
  ::tutorial::Article_Author* mutable_author();
  ::tutorial::Article_Author* release_author();
  void set_allocated_author(::tutorial::Article_Author* author);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // bool isFeatured = 6;
  void clear_isfeatured();
  static const int kIsFeaturedFieldNumber = 6;
  bool isfeatured() const;
  void set_isfeatured(bool value);

  // @@protoc_insertion_point(class_scope:tutorial.Article)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> topic_;
  mutable int _topic_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr snippet_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::tutorial::Article_Author* author_;
  ::google::protobuf::int32 id_;
  bool isfeatured_;
  mutable int _cached_size_;
  friend struct protobuf_article_5fcollection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ArticleCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.ArticleCollection) */ {
 public:
  ArticleCollection();
  virtual ~ArticleCollection();

  ArticleCollection(const ArticleCollection& from);

  inline ArticleCollection& operator=(const ArticleCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArticleCollection(ArticleCollection&& from) noexcept
    : ArticleCollection() {
    *this = ::std::move(from);
  }

  inline ArticleCollection& operator=(ArticleCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArticleCollection& default_instance();

  static inline const ArticleCollection* internal_default_instance() {
    return reinterpret_cast<const ArticleCollection*>(
               &_ArticleCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ArticleCollection* other);
  friend void swap(ArticleCollection& a, ArticleCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArticleCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  ArticleCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ArticleCollection& from);
  void MergeFrom(const ArticleCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ArticleCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tutorial.Article article = 1;
  int article_size() const;
  void clear_article();
  static const int kArticleFieldNumber = 1;
  const ::tutorial::Article& article(int index) const;
  ::tutorial::Article* mutable_article(int index);
  ::tutorial::Article* add_article();
  ::google::protobuf::RepeatedPtrField< ::tutorial::Article >*
      mutable_article();
  const ::google::protobuf::RepeatedPtrField< ::tutorial::Article >&
      article() const;

  // @@protoc_insertion_point(class_scope:tutorial.ArticleCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tutorial::Article > article_;
  mutable int _cached_size_;
  friend struct protobuf_article_5fcollection_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Article_Author

// int32 id = 1;
inline void Article_Author::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Article_Author::id() const {
  // @@protoc_insertion_point(field_get:tutorial.Article.Author.id)
  return id_;
}
inline void Article_Author::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Article.Author.id)
}

// string name = 2;
inline void Article_Author::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Article_Author::name() const {
  // @@protoc_insertion_point(field_get:tutorial.Article.Author.name)
  return name_.GetNoArena();
}
inline void Article_Author::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Article.Author.name)
}
#if LANG_CXX11
inline void Article_Author::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Article.Author.name)
}
#endif
inline void Article_Author::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Article.Author.name)
}
inline void Article_Author::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Article.Author.name)
}
inline ::std::string* Article_Author::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Article.Author.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Article_Author::release_name() {
  // @@protoc_insertion_point(field_release:tutorial.Article.Author.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Article_Author::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Article.Author.name)
}

// string email = 3;
inline void Article_Author::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Article_Author::email() const {
  // @@protoc_insertion_point(field_get:tutorial.Article.Author.email)
  return email_.GetNoArena();
}
inline void Article_Author::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Article.Author.email)
}
#if LANG_CXX11
inline void Article_Author::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Article.Author.email)
}
#endif
inline void Article_Author::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Article.Author.email)
}
inline void Article_Author::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Article.Author.email)
}
inline ::std::string* Article_Author::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Article.Author.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Article_Author::release_email() {
  // @@protoc_insertion_point(field_release:tutorial.Article.Author.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Article_Author::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Article.Author.email)
}

// -------------------------------------------------------------------

// Article

// int32 id = 1;
inline void Article::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Article::id() const {
  // @@protoc_insertion_point(field_get:tutorial.Article.id)
  return id_;
}
inline void Article::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Article.id)
}

// string title = 3;
inline void Article::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Article::title() const {
  // @@protoc_insertion_point(field_get:tutorial.Article.title)
  return title_.GetNoArena();
}
inline void Article::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Article.title)
}
#if LANG_CXX11
inline void Article::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Article.title)
}
#endif
inline void Article::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Article.title)
}
inline void Article::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Article.title)
}
inline ::std::string* Article::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Article.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Article::release_title() {
  // @@protoc_insertion_point(field_release:tutorial.Article.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Article::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Article.title)
}

// string snippet = 4;
inline void Article::clear_snippet() {
  snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Article::snippet() const {
  // @@protoc_insertion_point(field_get:tutorial.Article.snippet)
  return snippet_.GetNoArena();
}
inline void Article::set_snippet(const ::std::string& value) {
  
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Article.snippet)
}
#if LANG_CXX11
inline void Article::set_snippet(::std::string&& value) {
  
  snippet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Article.snippet)
}
#endif
inline void Article::set_snippet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Article.snippet)
}
inline void Article::set_snippet(const char* value, size_t size) {
  
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Article.snippet)
}
inline ::std::string* Article::mutable_snippet() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Article.snippet)
  return snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Article::release_snippet() {
  // @@protoc_insertion_point(field_release:tutorial.Article.snippet)
  
  return snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Article::set_allocated_snippet(::std::string* snippet) {
  if (snippet != NULL) {
    
  } else {
    
  }
  snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snippet);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Article.snippet)
}

// string content = 5;
inline void Article::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Article::content() const {
  // @@protoc_insertion_point(field_get:tutorial.Article.content)
  return content_.GetNoArena();
}
inline void Article::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Article.content)
}
#if LANG_CXX11
inline void Article::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Article.content)
}
#endif
inline void Article::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Article.content)
}
inline void Article::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Article.content)
}
inline ::std::string* Article::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Article.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Article::release_content() {
  // @@protoc_insertion_point(field_release:tutorial.Article.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Article::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Article.content)
}

// bool isFeatured = 6;
inline void Article::clear_isfeatured() {
  isfeatured_ = false;
}
inline bool Article::isfeatured() const {
  // @@protoc_insertion_point(field_get:tutorial.Article.isFeatured)
  return isfeatured_;
}
inline void Article::set_isfeatured(bool value) {
  
  isfeatured_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Article.isFeatured)
}

// .tutorial.Article.Author author = 7;
inline bool Article::has_author() const {
  return this != internal_default_instance() && author_ != NULL;
}
inline void Article::clear_author() {
  if (GetArenaNoVirtual() == NULL && author_ != NULL) delete author_;
  author_ = NULL;
}
inline const ::tutorial::Article_Author& Article::author() const {
  const ::tutorial::Article_Author* p = author_;
  // @@protoc_insertion_point(field_get:tutorial.Article.author)
  return p != NULL ? *p : *reinterpret_cast<const ::tutorial::Article_Author*>(
      &::tutorial::_Article_Author_default_instance_);
}
inline ::tutorial::Article_Author* Article::mutable_author() {
  
  if (author_ == NULL) {
    author_ = new ::tutorial::Article_Author;
  }
  // @@protoc_insertion_point(field_mutable:tutorial.Article.author)
  return author_;
}
inline ::tutorial::Article_Author* Article::release_author() {
  // @@protoc_insertion_point(field_release:tutorial.Article.author)
  
  ::tutorial::Article_Author* temp = author_;
  author_ = NULL;
  return temp;
}
inline void Article::set_allocated_author(::tutorial::Article_Author* author) {
  delete author_;
  author_ = author;
  if (author) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tutorial.Article.author)
}

// repeated .tutorial.Article.Topic topic = 8;
inline int Article::topic_size() const {
  return topic_.size();
}
inline void Article::clear_topic() {
  topic_.Clear();
}
inline ::tutorial::Article_Topic Article::topic(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.Article.topic)
  return static_cast< ::tutorial::Article_Topic >(topic_.Get(index));
}
inline void Article::set_topic(int index, ::tutorial::Article_Topic value) {
  topic_.Set(index, value);
  // @@protoc_insertion_point(field_set:tutorial.Article.topic)
}
inline void Article::add_topic(::tutorial::Article_Topic value) {
  topic_.Add(value);
  // @@protoc_insertion_point(field_add:tutorial.Article.topic)
}
inline const ::google::protobuf::RepeatedField<int>&
Article::topic() const {
  // @@protoc_insertion_point(field_list:tutorial.Article.topic)
  return topic_;
}
inline ::google::protobuf::RepeatedField<int>*
Article::mutable_topic() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.Article.topic)
  return &topic_;
}

// -------------------------------------------------------------------

// ArticleCollection

// repeated .tutorial.Article article = 1;
inline int ArticleCollection::article_size() const {
  return article_.size();
}
inline void ArticleCollection::clear_article() {
  article_.Clear();
}
inline const ::tutorial::Article& ArticleCollection::article(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.ArticleCollection.article)
  return article_.Get(index);
}
inline ::tutorial::Article* ArticleCollection::mutable_article(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.ArticleCollection.article)
  return article_.Mutable(index);
}
inline ::tutorial::Article* ArticleCollection::add_article() {
  // @@protoc_insertion_point(field_add:tutorial.ArticleCollection.article)
  return article_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tutorial::Article >*
ArticleCollection::mutable_article() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.ArticleCollection.article)
  return &article_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tutorial::Article >&
ArticleCollection::article() const {
  // @@protoc_insertion_point(field_list:tutorial.ArticleCollection.article)
  return article_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace tutorial

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tutorial::Article_Topic> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tutorial::Article_Topic>() {
  return ::tutorial::Article_Topic_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_article_5fcollection_2eproto__INCLUDED
